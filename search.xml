<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Project - Memory Card Game</title>
      <link href="/2020/02/13/1581541645/"/>
      <url>/2020/02/13/1581541645/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://i.imgur.com/QI28AQG.png" data-fancybox="group" data-caption="Memory Card Game" class="fancybox"><img alt="Memory Card Game" title="Memory Card Game" data-src="https://i.imgur.com/QI28AQG.png" class="lazyload"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li>Demo：<a href="https://as60160.github.io/Memory-Card-Game/" target="_blank" rel="noopener">https://as60160.github.io/Memory-Card-Game/</a></li><li>Code：<a href="https://github.com/as60160/Memory-Card-Game" target="_blank" rel="noopener">https://github.com/as60160/Memory-Card-Game</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打開 YouTube 首頁時看到這個推薦影片 (<a href="https://youtu.be/ZniVgo8U7ek" target="_blank" rel="noopener">Memory Card Game - JavaScript Tutorial</a>)，教導如何使用 Vanilla JavaScript 撰寫記憶卡牌遊戲。</p><ul><li>Demo: <a href="https://marina-ferreira.github.io/memory-game/" target="_blank" rel="noopener">https://marina-ferreira.github.io/memory-game/</a></li><li>Code: <a href="https://github.com/code-sketch/memory-game/" target="_blank" rel="noopener">https://github.com/code-sketch/memory-game/</a></li></ul><p><a href="https://i.imgur.com/7gXUjPx.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/7gXUjPx.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/HbikY7T.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/HbikY7T.png" class="lazyload"></a></p><p>照著影片練習過一次後，我在第二次的撰寫加入了一些想法，例如計時功能、破關之後的恭喜訊息，還有重新開始遊戲等等。</p><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>記憶遊戲，點擊卡片進行配對。</p><h3 id="使用工具或技術"><a href="#使用工具或技術" class="headerlink" title="使用工具或技術"></a>使用工具或技術</h3><ul><li>HTML<ul><li>data 屬性</li></ul></li><li>CSS<ul><li>3D 屬性</li></ul></li><li>JavaScript<ul><li>ES6 語法</li></ul></li></ul><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>詳細操作可以看影片，這裡只節錄影片中的主要步驟與一些用到的觀念技巧，主要為自己隨後加上的功能與做法。</p><h3 id="影片中的建立步驟"><a href="#影片中的建立步驟" class="headerlink" title="影片中的建立步驟"></a>影片中的建立步驟</h3><ul><li>建立資料夾與檔案</li><li>撰寫 HTML 並引入 CSS 和 JavaScript 檔案</li><li>重置 CSS</li><li>調整元素的樣式</li><li>抓取所有卡片到 JavaScript 並為它們註冊點擊事件，加上翻面效果</li><li>到 CSS 設定 3D 翻面效果</li><li>使用 JavaScript 儲存卡片以配對</li><li>用 data 屬性儲存卡片的花色，並且進行配對</li><li>重構程式碼</li><li>處理細節問題：配對失敗的卡片翻回來之前，鎖定畫面</li><li>處理細節問題：避免重複點擊卡片被判斷為配對成功</li><li>使用立即函式洗牌</li></ul><h3 id="影片中用到的觀念與技巧"><a href="#影片中用到的觀念與技巧" class="headerlink" title="影片中用到的觀念與技巧"></a>影片中用到的觀念與技巧</h3><ul><li>Position<ul><li>使用 <code>Position: absolute</code> 時，會往上層查找有被定位的元素，以該元素為定位基準。</li></ul></li><li>Flexbox<ul><li>在外層元素加上 <code>display: flex</code> ，外層元素和內層元素會有這些預設屬性：<ul><li>外層元素 (flex-container)<ul><li>flex-direction: row</li><li>flex-wrap: nowrap</li><li>justify-content: flex-start</li><li>align-items: stretch</li></ul></li><li>內層元素 (flex-item)<ul><li>flex: 1</li></ul></li></ul></li></ul></li><li>calc<ul><li>使用 <code>calc()</code> 時，裡面的運算符號前後都要留一格，不能緊跟著前後的數字。</li><li>例如：<code>width: calc(25% - 10px)</code></li></ul></li><li>3D Effect<ul><li><code>perspective</code> 在外層元素加上景深，</li><li><code>transform-style</code> 設定卡片位在 3D 空間</li><li><code>backface-visibility</code> 隱藏元素的背面</li><li><code>transform: rotateY(180deg)</code> 實現卡片翻面</li></ul></li><li>使用 <code>forEach()</code> 和 <code>addEventListener()</code> 為每張卡片監聽事件</li><li>使用 <code>classList.add()</code> 、 <code>classList.remove()</code>、<code>classList.toggle()</code>去調整 HTML 元素的 class</li><li>借助變數 <code>hasFlipedCard</code> 的值為 <code>true/false</code> 的判斷讓卡片兩兩一組</li><li>當配對成功時，用 <code>removeEventListener()</code> 移除事件的監聽</li><li>data 屬性<ul><li>使用 <code>data-*</code> 屬性在 HTML 儲存卡片的花色</li><li>並在 JavaScript 用 <code>dataset</code> 取得花色</li></ul></li><li>程式碼重構<ul><li>將程式碼以更小功能拆解</li><li>用三元運算式來簡化 if/else</li><li>用 return 來簡化 if/else</li></ul></li><li>借助變數 <code>lockBoard</code> 鎖定畫面</li><li>使用 <code>Math.random()</code> 產生亂數，並用 <code>Math.floor()</code> 取得最小整數。</li><li>使用 CSS flex 的 order 屬性為卡片排序。</li></ul><h3 id="增加計時功能"><a href="#增加計時功能" class="headerlink" title="增加計時功能"></a>增加計時功能</h3><p>照著影片練習過一次之後，有了一些想法，覺得可以加上去。例如計時功能，並在破關時顯示恭喜訊息等等。</p><p>我的想法是，網頁載入後，一旦點擊卡片所在範圍 (<code>.memory-game</code>)，就開始計時。由於這個動作只需要在第一次點擊時執行，因此啟動之後先移除這個監聽事件，以免每次點擊卡片都觸發這個動作。</p><p>然後，用 <code>new Date()</code> 取得點擊當下的時間作為起始時間，每秒執行一次 <code>countTime()</code> 以計算時間並且更新到畫面。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params"></span>) </span>{</span><br><span class="line">  cardArea.removeEventListener(<span class="string">'click'</span>, startTimer)</span><br><span class="line">  startTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  counting = setInterval(countTime, <span class="number">1000</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>接下來，<code>countTime()</code> 會每秒取得一次目前的時間，並與起始時間相減，這樣就能知道經過多少時間。再將時間以分和秒個別處理，最後呈現到 HTML 畫面。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">let</span> spendMilliseconds = currentTime - startTime</span><br><span class="line">  <span class="keyword">let</span> spendMinutes = <span class="built_in">Math</span>.floor(spendMilliseconds / <span class="number">1000</span> / <span class="number">60</span>).toString().padStart(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> spendSeconds = <span class="built_in">Math</span>.floor((spendMilliseconds / <span class="number">1000</span>) - (spendMinutes * <span class="number">60</span>)).toString().padStart(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">  spendTimes = spendMinutes + <span class="string">":"</span> + spendSeconds</span><br><span class="line">  showTimeText.innerHTML = spendTimes</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>最後，當所有的卡片都配對成功，也就是畫面中沒有未翻開的卡片時，就停止計時，並顯示恭喜等訊息。</p><p>為此，先取得所有卡片的數量，紀錄在變數 <code>unflipCardNumbers</code> 裡，表示未翻開的卡片數量。只要畫面上有卡片配對成功，就執行 <code>countUnflipCards</code> ，把 <code>unflipCardNumbers</code> 減二。等到 <code>unflipCardNumbers</code> 等於 <code>0</code> 的時候，就執行 <code>stopTime</code> 把計時暫停。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unflipCardNumbers = cards.length</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disableCards</span>(<span class="params"></span>) </span>{</span><br><span class="line">  firstCard.removeEventListener(<span class="string">'click'</span>, flipCard)</span><br><span class="line">  secondCard.removeEventListener(<span class="string">'click'</span>, flipCard)</span><br><span class="line">  resetBoard()</span><br><span class="line">  countUnflipCards()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countUnflipCards</span>(<span class="params"></span>) </span>{</span><br><span class="line">  unflipCardNumbers -= <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> (unflipCardNumbers == <span class="number">0</span>) stopTime()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">  clearInterval(counting)</span><br><span class="line">  spendTimeText.innerHTML = spendTimes</span><br><span class="line">  messageText.classList.remove(<span class="string">'none'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>實際執行的結果如下：<br><a href="https://i.imgur.com/oodHaXh.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/oodHaXh.png" class="lazyload"></a></p><h3 id="顯示訊息與重新開始"><a href="#顯示訊息與重新開始" class="headerlink" title="顯示訊息與重新開始"></a>顯示訊息與重新開始</h3><p>當畫面上所有的牌都配對成功之後，除了停止計時，也會移除我加在訊息視窗的 <code>none</code> ，並且顯示恭喜訊息、花費的時間，還有重新開始遊戲的按鈕。</p><p>如果按下重新開始遊戲的按鈕，會將 <code>none</code> 加回到訊息視窗，以關閉訊息視窗，並且重新整理網頁來重新開始遊戲。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">  clearInterval(counting)</span><br><span class="line">  spendTimeText.innerHTML = spendTimes</span><br><span class="line">  messageText.classList.remove(<span class="string">'none'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startNewGame</span>(<span class="params"></span>) </span>{</span><br><span class="line">  messageText.classList.add(<span class="string">'none'</span>)</span><br><span class="line">  <span class="built_in">window</span>.location.reload()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">newGameButton.addEventListener(<span class="string">'click'</span>, startNewGame)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/LciJBdC.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/LciJBdC.png" class="lazyload"></a></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這個影片讓我學到很多，例如 3D 效果的使用，透過 CSS flex 的 order 讓元素排序，還有一些 JavaScript 的撰寫思路。</p><p>最後我也將自己對於計時、顯示訊息的想法加到這個遊戲，並將卡片和背景顏色改成了漸層色。雖然總覺得破關後道恭喜的訊息視窗簡陋了點，不過目前還沒其他更好的想法，就先這樣吧。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://wcc723.github.io/css/2013/10/11/css-perspective/" target="_blank" rel="noopener">CSS transform-3D的透視(perspective)</a></li><li><a href="https://www.oxxostudio.tw/articles/201506/css-3d.html" target="_blank" rel="noopener">玩轉 CSS 3D - 原理篇</a></li><li><a href="https://kknews.cc/news/qgevmn8.html" target="_blank" rel="noopener">看圖理解 perspective 和 preserve-3d</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> 3D Effect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project - Lottery Number Generator</title>
      <link href="/2020/02/13/1581541102/"/>
      <url>/2020/02/13/1581541102/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://i.imgur.com/SYokE6u.png" data-fancybox="group" data-caption="Lottery Number Generator" class="fancybox"><img alt="Lottery Number Generator" title="Lottery Number Generator" data-src="https://i.imgur.com/SYokE6u.png" class="lazyload"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li>Demo：<a href="https://as60160.github.io/Lottery-Number-Generator/public/" target="_blank" rel="noopener">https://as60160.github.io/Lottery-Number-Generator/public/</a></li><li>Code：<a href="https://github.com/as60160/Lottery-Number-Generator" target="_blank" rel="noopener">https://github.com/as60160/Lottery-Number-Generator</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原本是想複習隨機產生不重複的數字，後來想到曾看過有人用隨機產生數字來產生樂透號碼，就順手寫了一個按下按鈕隨機產生數字的功能出來。</p><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>點擊機器的白色旋轉鈕，將隨機產生一組範圍在 1 到 49 之間，且不重複的 7 個數字。</p><h3 id="使用工具或技術"><a href="#使用工具或技術" class="headerlink" title="使用工具或技術"></a>使用工具或技術</h3><ul><li>Pug</li><li>Sass</li><li>Gulp</li><li>Google Fonts</li></ul><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>建立一個變數 <code>lotteryNumbers</code> 為空陣列，預備存放樂透號碼。</p><p>使用 <code>Math.random()</code> 產生隨機數字，然後用 <code>indexOf()</code> 去檢查產生的數字是否已存在 <code>lotteryNumbers</code> 陣列中，如果沒有，就推入陣列，直到總共有七個不重複的數字。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNumbers</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> randomNumber;</span><br><span class="line">  <span class="keyword">var</span> lotteryNumbers = [];</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i <= <span class="number">7</span>) {</span><br><span class="line">    randomNumber = (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">49</span>) + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> (lotteryNumbers.indexOf(randomNumber) == <span class="number">-1</span>) {</span><br><span class="line">      lotteryNumbers.push(randomNumber);</span><br><span class="line">      i++;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>原本習慣性使用 <code>for</code> 去做這件事，但執行之後發現，陣列裡面的數字確實沒有重複，不過有時候會不足七個數字。這才想到， <code>for</code> 迴圈會隨著 <code>i</code> 執行七次，但產生重複的數字就不會推到陣列裡，所以有時候數字會不足七個。</p><p>於是，就改用 <code>while</code> ，當產生的數字是不重複的， <code>i</code> 才會加一，如此一來，就會確保執行結果確實為七個不重複的數字。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>一開始只是想練 JavaScript 的功能而已，所以 HTML 和 CSS 就是隨興寫寫，加個按鈕綁定點擊事件來產生數字。</p><p><a href="https://i.imgur.com/lJD8vgd.png" data-fancybox="group" data-caption="第一版" class="fancybox"><img alt="第一版" title="第一版" data-src="https://i.imgur.com/lJD8vgd.png" class="lazyload"></a></p><p>但寫完之後，覺得這樣實在是單調了些，就憑感覺刻了一個機器出來取代原本的按鈕，讓畫面看起來有趣、活潑一點。</p><p><a href="https://i.imgur.com/d2ASigl.png" data-fancybox="group" data-caption="第二版" class="fancybox"><img alt="第二版" title="第二版" data-src="https://i.imgur.com/d2ASigl.png" class="lazyload"></a></p><p>最後再經過一番修改，就是現在看到的樣子啦，出來的樣子果然比較賞心悅目。</p><p><a href="https://i.imgur.com/JmDLaPi.png" data-fancybox="group" data-caption="第三版" class="fancybox"><img alt="第三版" title="第三版" data-src="https://i.imgur.com/JmDLaPi.png" class="lazyload"></a></p><p>最近正好在學習 Gulp ，就用 Pug 跟 Sass 再寫一遍，然後透過 Gulp 寫任務去編譯跟監看。</p><p>使用 Gulp 去自動執行各個任務真的很方便，不過跟原本的檔案比起來，檔案數量多出了不少，用在小專案上似乎是大材小用了，但拿來練練手還是不錯的。</p><p>本來還打算顯示依產生順序排列，以及依數字大小排序兩種版本，但又覺得這樣看起來會太雜，故作罷。不過，程式碼還是留著，之後如果還有什麼想法再來改寫吧。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Gulp </tag>
            
            <tag> Pug </tag>
            
            <tag> Sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project - New Labor Pension Fund</title>
      <link href="/2020/02/13/1581540253/"/>
      <url>/2020/02/13/1581540253/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://i.imgur.com/q4VjnzN.jpg" data-fancybox="group" data-caption="新制勞工退休基金經營概況" class="fancybox"><img alt="新制勞工退休基金經營概況" title="新制勞工退休基金經營概況" data-src="https://i.imgur.com/q4VjnzN.jpg" class="lazyload"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li>Demo：<a href="https://as60160.github.io/New-Labor-Pension-Fund/" target="_blank" rel="noopener">https://as60160.github.io/New-Labor-Pension-Fund/</a></li><li>Code：<a href="https://github.com/as60160/New-Labor-Pension-Fund" target="_blank" rel="noopener">https://github.com/as60160/New-Labor-Pension-Fund</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在政府資料開放平臺逛到投資理財類別時，看到新制勞工退休基金每月收益。前段時間，新聞總是提到新制勞工退休基金這幾個月的收益不錯，加上我之前也有自提退休金，就好奇這幾個月的收益到底有多好。由於這些資料直接看並不直覺，於是決定將它畫成圖表，連同相關資訊一起觀察。</p><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>藉由視覺化的方式觀察：</p><ul><li>新制勞工退休基金近一年來每個月的操作收益率與保證收益率。</li><li>新制勞工退休基金歷年的操作收益與保證收益。</li><li>新制勞工退休基金投資的股票類型以及投資比例。</li></ul><h3 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h3><p>資料取自於<a href="https://data.gov.tw/datasets/search?qs=tid:6410+%E5%8B%9E%E5%B7%A5%E9%80%80%E4%BC%91%E5%9F%BA%E9%87%91" target="_blank" rel="noopener">政府資料開放平臺</a>，搜尋關鍵字為 「勞工退休基金」。</p><h3 id="使用工具或技術"><a href="#使用工具或技術" class="headerlink" title="使用工具或技術"></a>使用工具或技術</h3><ul><li>Bootstrap</li><li>jQuery</li><li>Chart.js</li><li>skrollr</li></ul><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>因為這次的練習主要在 API 的串接，所以使用 Bootstrap 來排版跟架構內容，搭配 jQuery 使用 AJAX ，再以 Chart.js 繪製圖形讓資料視覺化，最後用 skrollr 加上一點視差滾動效果，讓頁面不至於太過單調。</p><p>進行到畫表格的時候，琢磨了一下 jQuery 動態產生表格的程式碼該怎麼寫，畢竟表格用到的標籤多，而且各有其功能與意義。想到之前曾看過別人做九九乘法表的表格，就去找來看撰寫邏輯，這才將思路理清。</p><p>接著將 AJAX 載入的資料用 Chart.js 繪製出來。由於這是我第一次用 Chart.js，閱讀了 Chart.js 官方文件，以及其他開發者用 AJAX 取得的資料繪製 Chart.js 圖形的紀錄文章，歸納執行步驟如下：</p><ol><li>先引用 Chart.js 的 CDN </li><li>在 HTML 加上 <code>canvas</code> 定義圖形位置</li><li>在 JavaScript 使用 AJAX 取得資料 </li><li>透過 for 迴圈將取得的資料推到建立的空陣列中 (X 軸標籤、折線圖資料)</li><li>取得 Canvas 的內容</li><li>建構圖表、將資料指派到對應位置，並設置圖表的各項屬性與值</li></ol><p>不過，範例都是一組資料，也就是說，折線圖中只有一條線，但我想放兩組資料，產生兩條線去互相比較、看走向，在官方文件中卻沒找到，一時不知道該從哪裡下手。</p><p>後來看到 <a href="https://www.chartjs.org/samples/latest/" target="_blank" rel="noopener">Chart.js Samples</a> 的範例中有兩條線的折線圖，去找了 GitHub 內對應的程式碼來看，才明白如果要在裡面放兩組資料，只要在 datasets 中用陣列放兩組物件，分別設置資料即可。</p><p>節錄部分程式碼整理如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$.ajax({</span><br><span class="line">    url: <span class="string">"url"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>{</span><br><span class="line">      <span class="keyword">var</span> responseData = res.result.records;</span><br><span class="line">      <span class="keyword">var</span> labels = [];</span><br><span class="line">      <span class="keyword">var</span> dataset1 = [];</span><br><span class="line">      <span class="keyword">var</span> dataset2 = [];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 將取得的資料推入陣列</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i < responseData.length; i++) {</span><br><span class="line">        <span class="keyword">var</span> month = responseData[i].月別;</span><br><span class="line">        <span class="keyword">var</span> rateOfInvestment = responseData[i].收益率;</span><br><span class="line">        <span class="keyword">var</span> rateOfGuarantee = responseData[i].保證收益率;</span><br><span class="line">        labels.push(month);</span><br><span class="line">        dataset1.push(rateOfInvestment);</span><br><span class="line">        dataset2.push(rateOfGuarantee);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 繪製折線圖</span></span><br><span class="line">      <span class="keyword">var</span> ctx = $(<span class="string">"#chartForNewByMonth"</span>);</span><br><span class="line">      <span class="keyword">var</span> chart = <span class="keyword">new</span> Chart(ctx, {</span><br><span class="line">        type: <span class="string">"line"</span>,</span><br><span class="line">        data: {</span><br><span class="line">          labels: labels,</span><br><span class="line">          datasets: [{</span><br><span class="line">            label: <span class="string">"收益率"</span>,</span><br><span class="line">            data: dataset1,</span><br><span class="line">            borderColor: <span class="string">"#1769ff"</span>,</span><br><span class="line">            fill: <span class="literal">false</span></span><br><span class="line">          }, {</span><br><span class="line">            label: <span class="string">"保證收益率"</span>,</span><br><span class="line">            data: dataset2,</span><br><span class="line">            borderColor: <span class="string">"#70b29c"</span>,</span><br><span class="line">            fill: <span class="literal">false</span></span><br><span class="line">          }]</span><br><span class="line">        },</span><br><span class="line">        options: {</span><br><span class="line">          responsive: <span class="literal">true</span>,</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>繪製第三部分國內投資股票時，因為資料筆數多，表格不好呈現，所以只顯示折線圖。為了更好看出這些股票的投資比例高低，在繪製之前先將取得的資料進行了排序，然後才繪製圖形。</p><p>最後，因為覺得整體過於單調，所以用 skrollr 加上一點視差滾動效果。但滑鼠滾著滾著卻發現，只有「每月經營概況」那邊有反應，「年度經營概況」跟「股票類別」沒反應。</p><p>因為查了一陣子仍然看不出問題在哪裡，就到臉書的前端社團詢問。才知道這是因為在 AJAX 拿到資料繪製圖表之前，skrollr 已經完成 scroll 事件綁定，這時候 DOM 還沒有圖表的元素及高度。如果要解決這個問題，在每個 AJAX 繪圖之後加上 <code>s.refresh()</code> 就能看到效果了。</p><p>在這之前，有網友回饋視窗大小變化後，「年度經營概況」跟「股票類別」就會有反應。會這樣是因為視窗縮放時，skrollr 會重新計算高度，並且呼叫 refresh API。</p><h2 id="問題與解決"><a href="#問題與解決" class="headerlink" title="問題與解決"></a>問題與解決</h2><p>製作這個作品時，我遇到的問題及解決方式整理如下：</p><h3 id="問題一：-jQuery-怎麼動態產生表格"><a href="#問題一：-jQuery-怎麼動態產生表格" class="headerlink" title="問題一： jQuery 怎麼動態產生表格"></a>問題一： jQuery 怎麼動態產生表格</h3><p>進行到畫表格的時候，因為表格用到的標籤多，而且各有其功能與意義。所以怎麼用 jQuery 動態產生表格讓我思索了一番。</p><p>後來想起，之前曾看過別人做九九乘法表的表格，就去找來看撰寫邏輯，這才將思路理清，順手也做了一個九九乘法表出來。</p><p><a href="https://i.imgur.com/5FhocXF.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.imgur.com/5FhocXF.png" class="lazyload"></a></p><p>參考： <a href="https://books.google.com.tw/books?id=zDawBAAAQBAJ&pg=SA3-PA24&dq=jquery+%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8&hl=zh-TW&sa=X&ved=0ahUKEwi0i-3TwY3mAhVpF6YKHRKFARsQ6AEIKjAA#v=onepage&q=jquery%20%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8&f=false" target="_blank" rel="noopener">JavaScript與jQuery網頁設計範例教本 (電子書)</a></p><h3 id="問題二：如何用-AJAX-取得的資料繪製-Chart-js-折線圖"><a href="#問題二：如何用-AJAX-取得的資料繪製-Chart-js-折線圖" class="headerlink" title="問題二：如何用 AJAX 取得的資料繪製 Chart.js 折線圖"></a>問題二：如何用 AJAX 取得的資料繪製 Chart.js 折線圖</h3><p>第一次用 Chart.js 繪圖，所以去找官方文件研究其安裝跟使用方式。不過，官方範例中使用的圖形資料都是寫死的，而且只有一條線。但我希望政府資料開放平臺上的資料更新時，我的網頁上的圖形跟資料能透過 AJAX 隨之改變，而且裡面可以放兩組資料進去觀察。</p><p>查了幾篇其他開發者的文章後，看到最簡單的方式是先建立空陣列，用 for 迴圈將資料依序推進去，然後再將這些陣列放到 Chart.js 對應的位置。</p><p>再來要解決放兩組資料的問題，我在 <a href="https://www.chartjs.org/samples/latest/" target="_blank" rel="noopener">Chart.js Samples</a> 看到範例中有兩條線的折線圖，去找了 GitHub 內對應的程式碼來看，才明白如果要在裡面放兩組資料，只要在 datasets 中用陣列放兩組物件，分別設置資料即可。</p><p>參考：</p><ul><li><a href="https://www.chartjs.org/docs/latest/getting-started/" target="_blank" rel="noopener">Chart.js Docs</a></li><li><a href="https://github.com/chartjs/Chart.js/blob/master/samples/charts/line/basic.html" target="_blank" rel="noopener">Chart.js line chart basic sample</a></li><li><a href="http://www.voidcn.com/article/p-hjsnamyq-bmd.html" target="_blank" rel="noopener">Chart.js 通过AJAX请求JSON数据来绘制图表</a></li><li><a href="https://github.com/chartjs/Chart.js/blob/master/samples/charts/line/basic.html" target="_blank" rel="noopener">Chart.js/samples/charts/line/basic</a></li></ul><h3 id="問題三：將投資股票依比重大小排序"><a href="#問題三：將投資股票依比重大小排序" class="headerlink" title="問題三：將投資股票依比重大小排序"></a>問題三：將投資股票依比重大小排序</h3><p>繪製第三部分國內投資股票時，原本的資料順序是依股票類型排序的，但這樣一來，除了電子產業、金融產業，以及塑膠工業較為明顯之外，其他的股票類型難以一眼看出比例多寡。</p><p>為了更輕易看出這些股票的投資比例高低，我在繪圖之前先將取得的資料依投資比例排序。不過因為資料比較多層，一時轉不過來要怎麼將這些資料排序。</p><p>後來發現是我想得太複雜了，同樣用 <code>sort()</code> 搭配函式即可。只不過進行判斷時，要帶上想排序的屬性名稱，這樣就能比較那個屬性的值了。</p><p>範例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rank = scores.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> a.score < b.score ? <span class="number">1</span> : <span class="number">-1</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></div><p>參考： <a href="http://www.eion.com.tw/Blogger/?Pid=1170" target="_blank" rel="noopener">JavaScript 陣列元素順序重新排序 sort()</a></p><h3 id="問題四：skrollr-無法正常呈現效果"><a href="#問題四：skrollr-無法正常呈現效果" class="headerlink" title="問題四：skrollr 無法正常呈現效果"></a>問題四：skrollr 無法正常呈現效果</h3><p>加上 skrollr 後使用發現，只有「每月經營概況」那邊有視差滾動效果，「年度經營概況」跟「股票類別」沒反應。</p><p>因為查了一陣子仍然找不出問題在哪裡，就到臉書的前端社團詢問。才知道這是因為在 AJAX 拿到資料繪製圖表之前，skrollr 已經完成 scroll 事件綁定，這時候 DOM 還沒有圖表的元素及高度。如果要解決這個問題，在每個 AJAX 繪圖之後加上 <code>s.refresh()</code> 就能看到效果了。</p><p>去 skrollr GitHub 找了 README 文件裡，有關 refresh API 的說明來看：</p><p><a href="https://i.imgur.com/sAp0003.png" data-fancybox="group" data-caption="refresh API" class="fancybox"><img alt="refresh API" title="refresh API" data-src="https://i.imgur.com/sAp0003.png" class="lazyload"></a></p><p>裡面提到，refresh API 會重新解析所有給定的元素，如果小括號內沒有給定元素，則再次解析文檔中所有元素。</p><p>這個 API 適合在以下幾種情況使用：</p><ul><li>當元素使用 “relative” 模式且需要被更新的時候</li><li>資料屬性是動態操作的</li><li>在 DOM 增加新元素，且新元素會受到 skrollr 控制</li></ul><p>以下為蒐集到的使用 refresh API 的寫法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = skrollr.init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//........</span></span><br><span class="line"></span><br><span class="line">s.refresh($(<span class="string">"#home-slides div"</span>));</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Add one element dynamically</span></span><br><span class="line"><span class="keyword">var</span> newElement = $(</span><br><span class="line">  <span class="string">'<div id="dynamic" data-0="bottom:0px;" data-250="bottom:100px;">TEST</div>'</span></span><br><span class="line">).appendTo(<span class="string">'body'</span>);</span><br><span class="line">s.refresh(newElement[<span class="number">0</span>]);</span><br></pre></td></tr></tbody></table></figure></div><p>此外，有網友回饋視窗大小變化後，「年度經營概況」跟「股票類別」就會有效果了。會這樣是因為視窗縮放時，skrollr 會重新計算高度，並且呼叫 refresh API。</p><p>參考：</p><ul><li><a href="https://github.com/Prinzhorn/skrollr/blob/master/README.md#refreshelements" target="_blank" rel="noopener">skrollr refresh([elements])</a></li><li><a href="https://github.com/Prinzhorn/skrollr/issues/114" target="_blank" rel="noopener">Refresh() not working #114</a></li></ul><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>畫成圖表之後去看，這幾個月的收益率確實節節攀升，對於勞工們來說是福音。</p><p><a href="https://i.imgur.com/baHOcZQ.png" data-fancybox="group" data-caption="每月經營概況" class="fancybox"><img alt="每月經營概況" title="每月經營概況" data-src="https://i.imgur.com/baHOcZQ.png" class="lazyload"></a></p><p>年度的部分可看出，較差的幾年正好逢股災，收益不好也在所難免。其它年度的收益則優於保證收益率。</p><p><a href="https://i.imgur.com/QKQHolM.png" data-fancybox="group" data-caption="年度經營概況" class="fancybox"><img alt="年度經營概況" title="年度經營概況" data-src="https://i.imgur.com/QKQHolM.png" class="lazyload"></a></p><p>而透過投資股票類別能看到，新制勞工退休基金在國內投資的股票，多半集中在起伏較大的電子產業，然後是穩定的金融保險類股。</p><p><a href="https://i.imgur.com/Ntxnzqw.png" data-fancybox="group" data-caption="國內投資股票類別" class="fancybox"><img alt="國內投資股票類別" title="國內投資股票類別" data-src="https://i.imgur.com/Ntxnzqw.png" class="lazyload"></a></p><p>考慮過把舊制勞退基金的資料也一起放進來，但舊制的每月收益不知為何只提供最近一個月的資料，再加上舊制歷史悠久，年度資料過多，如何呈現是個問題。其投資股票類別的比例也與新制差異不大，只有在指數股票型基金的投資比例 4.x% 相較新制的 0.2% 高很多。至於多出來的這些，主要是減少電子產業類別的比例來的。</p><p>本來想說這些資料是透過 AJAX 取得的，那麼只要政府資料開放平臺更新，這個頁面上的資料也會隨之更新、不怕過時。但是，等到次月政府資料開放平臺上的資料更新後，打開來看發現除了年度收益的資料仍在，每月收益跟股票投資類別的資料都沒有顯示出來。</p><p>到政府資料開放平臺確認後發現，次月新資料的 API 網址路徑位置和我當時取得的不同。於是，舊的不能用，新的不會來。只好改為下載 JSON 格式的檔案替代網址，以免下個月資料更新時，網頁又撈不到資料可用。</p><p>雖然政府資料開放平臺更新時，我的網頁資料無法自動隨之更新讓我覺得遺憾，但至少一開始將資料視覺化的目的有達到，也算滿足了。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> AJAX </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> Chart.js </tag>
            
            <tag> skrollr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project - Moment.js Cheat Sheet</title>
      <link href="/2020/02/13/1581539741/"/>
      <url>/2020/02/13/1581539741/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://i.imgur.com/Vuv1L6G.png" data-fancybox="group" data-caption="Moment.js Cheat Sheet" class="fancybox"><img alt="Moment.js Cheat Sheet" title="Moment.js Cheat Sheet" data-src="https://i.imgur.com/Vuv1L6G.png" class="lazyload"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li>Demo：<a href="https://as60160.github.io/Moment.js-Cheat-Sheet/" target="_blank" rel="noopener">https://as60160.github.io/Moment.js-Cheat-Sheet/</a></li><li>Code：<a href="https://github.com/as60160/Moment.js-Cheat-Sheet" target="_blank" rel="noopener">https://github.com/as60160/Moment.js-Cheat-Sheet</a></li></ul><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>顯示 <a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 中常用的時間方法以及執行結果。</p><h3 id="使用工具或技術"><a href="#使用工具或技術" class="headerlink" title="使用工具或技術"></a>使用工具或技術</h3><ul><li>Moment.js</li></ul><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>一開始只是單純記下練習過的 moment.js 方法，並且對照執行後的結果，所以程式碼寫得很隨興。</p><p>HTML 部分</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"now"</span>></span>moment();<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->ul</span>></span><br></pre></td></tr></tbody></table></figure></div><p>JavaScript 部分</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = moment();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'now'</span>).after(now);</span><br></pre></td></tr></tbody></table></figure></div><p>後來官方文件看著看著，試過的方法越來越多，就想說來分類一下好了，於是就變這樣：</p><p>HTML 部分</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">h3</span>></span>Now<span class="tag"><!--<span class="name"-->h3</span>></span><br><span class="line">  <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"now"</span>></span>moment();<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"nowF"</span>></span>moment().format();<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"nowF1"</span>></span>moment().format("YYYY/MM/DD HH:mm:ss dddd");<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"nowF2"</span>></span>moment().format("MMMM Do YYYY, h:mm:ss a");<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">    <span class="tag"><<span class="name">li</span> <span class="attr">id</span>=<span class="string">"nowF3"</span>></span>moment().format("[今天是] YYYY [年中的第] DDD [天]");<span class="tag"><!--<span class="name"-->li</span>></span><br><span class="line">  <span class="tag"><!--<span class="name"-->ul</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->div</span>></span><br></pre></td></tr></tbody></table></figure></div><p>JavaScript 部分</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 當下的時間</span></span><br><span class="line"><span class="keyword">var</span> now = moment();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'now'</span>).after(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 format 改變格式</span></span><br><span class="line"><span class="keyword">var</span> nowF = moment().format();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'nowF'</span>).after(nowF);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowF1 = moment().format(<span class="string">'YYYY/MM/DD HH:mm:ss dddd'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'nowF1'</span>).after(nowF1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowF2 = moment().format(<span class="string">'MMMM Do YYYY, h:mm:ss a'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'nowF2'</span>).after(nowF2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nowF3 = moment().format(<span class="string">'[今天是] YYYY [年中的第] DDD [天]'</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'nowF3'</span>).after(nowF3);</span><br></pre></td></tr></tbody></table></figure></div><p>程式碼越來越長之後，覺得這樣土法煉鋼地複製貼上修改很沒有效率。只是，因為一開始只想單純開個檔案練習並且記錄自己練了些什麼，練完存在本機以便未來對照筆記翻看及測試，所以採用這種比較直覺又沒效率的方式。雖然想改，但累積的程式碼已經不少，所以乾脆就繼續用這樣的模式繼續進行下去了。</p><p>不過，自己花了那麼多時間，也累積了不少 moment.js 的方法和結果，就這樣跟其他的練習檔案推在一起總覺得可惜。於是加上 CSS 並稍微排版，把它變成一個 moment.js 時間處理方法的速查表，方便以後查閱。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Moment.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project - Colorful Clock</title>
      <link href="/2020/02/13/1581539433/"/>
      <url>/2020/02/13/1581539433/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p><a href="https://i.imgur.com/0b2PuCu.png" data-fancybox="group" data-caption="Colorful Clock" class="fancybox"><img alt="Colorful Clock" title="Colorful Clock" data-src="https://i.imgur.com/0b2PuCu.png" class="lazyload"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li>Demo：<a href="https://as60160.github.io/Colorful-Clock/" target="_blank" rel="noopener">https://as60160.github.io/Colorful-Clock/</a></li><li>Code：<a href="https://github.com/as60160/Colorful-Clock" target="_blank" rel="noopener">https://github.com/as60160/Colorful-Clock</a></li></ul><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>從 「<a href="https://jenniferdewalt.com/color_clock.html" target="_blank" rel="noopener">180 websites in 180 days</a>」 看到的，這是裡面的 Day 11 作品。</p><p>這個網頁每過一秒會更新時間，同時漸進式改變背景的顏色，並且將背景顏色的 16 進位代碼 (Hex 色碼) 呈現在畫面上。</p><p><a href="https://i.imgur.com/0Zn0q1p.png" data-fancybox="group" data-caption="原始作品" class="fancybox"><img alt="原始作品" title="原始作品" data-src="https://i.imgur.com/0Zn0q1p.png" class="lazyload"></a></p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ol><li>使用 JavaScript 的 <code>setInterval()</code> 讓時間跟顏色每一秒改變一次。</li><li>原始作品是用 Hex 色碼表示顏色，我改用 RGB 色碼表示。</li><li>原始作品的時間跟顏色之間有關聯，所以重新載入網頁後，顏色不會隨機改變，而是按照原有的設定進行。我的作法是讓網頁每次載入時，都隨機產生顏色。</li></ol><h3 id="使用工具或技術"><a href="#使用工具或技術" class="headerlink" title="使用工具或技術"></a>使用工具或技術</h3><p>全部用 JavaScript 進行操作，其中幾個重要的方法如下：</p><ul><li>時間函數：<ul><li><code>new Date()</code></li><li><code>getHours()</code></li><li><code>getMinutes()</code></li><li><code>getSeconds()</code></li></ul></li><li>排程設定：<ul><li><code>setInterval()</code></li></ul></li></ul><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>先在 HTML 架構好標題 (<code>h5</code>) ，利用空的 <code>div</code> 提供時間以及顏色色碼要顯示的地方。<br>分別給 <code>div</code> 對應的 <code>id</code>， 方便後續 JavaScript 取得並操作這些物件以顯示資訊。</p><p>接著處理 CSS 的部分。這個網頁的結構單純，需要調整的地方不多。幾個要點如下：</p><ul><li>要讓畫面滿版，避免有留白的地方，所以設定全域的 <code>padding</code> 跟 <code>marging</code> 為 <code>0</code>。</li><li>透過 “Google Fonts” 改字型。</li><li>用 <code>text-align: center</code> 讓位於 <code>.container</code> 中的內容水平置中。</li><li>用 <code>transiton: .5s</code> 讓網頁的背景顏色切換時，能平滑漸進地轉換，而不是很突兀地跳了一個顏色。</li><li>運用一點 RWD，讓網頁在小螢幕時，字變小一點。</li></ul><p>再來，用 JavaScript 處理動態效果。首先，當頁面載入成功時，就要呈現當下的時間以及顏色。因此我在 <code>body</code> 的起始標籤中加上 <code>onload="start();"</code> ，偵測頁面載入完成時執行動作。要執行的動作主要有三個部分：</p><ol><li>取得目前時間：取得頁面載入完成當下的時間並顯示出來。</li><li>隨機產生顏色：隨機產生一組 RGB 色碼顯示於畫面上，也同時成為網頁的背景顏色。</li><li>每秒自動更新：每過一秒，就更新時間和顏色的值，同時渲染網頁的背景顏色。</li></ol><h3 id="1-取得目前時間"><a href="#1-取得目前時間" class="headerlink" title="1. 取得目前時間"></a>1. 取得目前時間</h3><p>使用 JavaScript 內建的 <code>new Date()</code> 取得當下的時間，再分別抓出裡面的時、分與秒。接著用 <code>innerHTML</code> 將這些取得的資料放到 <code>id</code> 為 <code>time</code> 的位置內。</p><p>但是，完成後會發現，如果任一時間的值小於 10 ，則只會顯示一位數字，例如會顯示 “7” 而不是 “07”。因此，我用條件判斷，如果數字小於 10， 就在前面強制加上 “0”，確保出來的結果皆為兩位數字。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抓出時間要顯示的位置</span></span><br><span class="line"><span class="keyword">var</span> timeStr = <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 頁面載入時，取得目前時間</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currentTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> nowHours = nowTime.getHours();</span><br><span class="line">    <span class="keyword">var</span> nowMinus = nowTime.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> nowSeconds = nowTime.getSeconds();</span><br><span class="line">    <span class="comment">// 讓取得的時間用 appendZero() 確保以兩位數呈現，顯示到畫面上。</span></span><br><span class="line">    timeStr.innerHTML = appendZero(nowHours) + <span class="string">" : "</span> + appendZero(nowMinus) + <span class="string">" : "</span> + appendZero(nowSeconds);</span><br><span class="line">}</span><br><span class="line">currentTime();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 當數字是個位數時，前面加 0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendZero</span>(<span class="params">num</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (num < <span class="number">10</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span> + num;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="2-隨機產生顏色"><a href="#2-隨機產生顏色" class="headerlink" title="2. 隨機產生顏色"></a>2. 隨機產生顏色</h3><p>宣告一個空陣列 <code>rgbNum</code> ，存放代表 RGB 的三個數字。以及 <code>startNum</code> 作為隨機產生的 RGB 初始數字 。</p><p>使用 <code>Math.random()</code> 產生亂數，再用 <code>Math.floor()</code> 取得範圍在 0~255 的整數。透過 <code>for</code> 迴圈一個個產生亂數的同時，也逐項放到陣列裡面，最後得到一個裡面有三個亂數的陣列。</p><p>將這三個數字組成符合 RGB 色碼格式的字串 <code>rgb</code> ，顯示到畫面上並且渲染畫面的背景顏色。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抓出色碼要顯示的位置</span></span><br><span class="line"><span class="keyword">var</span> colorStr = <span class="built_in">document</span>.getElementById(<span class="string">"color"</span>);</span><br><span class="line"><span class="comment">// 宣告一個空陣列，用來存放 RGB 色碼的三個數字。</span></span><br><span class="line"><span class="keyword">var</span> rgbNum = [];</span><br><span class="line"><span class="comment">// 用來存放產生的 RGB 色碼字串。</span></span><br><span class="line"><span class="keyword">var</span> rgb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currentColor</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 要隨機產生的 RGB 初始數字</span></span><br><span class="line">    <span class="keyword">var</span> startNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 產生三個隨機數字，並指派到 rgbNum 陣列中儲存。</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i <= <span class="number">2</span>; i++) {</span><br><span class="line">        <span class="comment">// 無條件捨去，取得 0~255 的隨機數字。</span></span><br><span class="line">        startNum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        rgbNum[i] = startNum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將 RGB 色碼字串指派到變數 rgb 中，讓後面的程式碼簡潔。</span></span><br><span class="line">    rgb = <span class="string">"rgb("</span> + rgbNum[<span class="number">0</span>] + <span class="string">","</span> + rgbNum[<span class="number">1</span>] + <span class="string">","</span> + rgbNum[<span class="number">2</span>] + <span class="string">")"</span>;</span><br><span class="line">    <span class="comment">// 更改背景顏色，並將 RGB 色碼呈現到畫面上。</span></span><br><span class="line">    <span class="built_in">document</span>.body.style.backgroundColor = rgb;</span><br><span class="line">    colorStr.innerHTML = rgb;</span><br><span class="line">}</span><br><span class="line">currentColor();</span><br></pre></td></tr></tbody></table></figure></div><h3 id="3-每秒自動更新"><a href="#3-每秒自動更新" class="headerlink" title="3. 每秒自動更新"></a>3. 每秒自動更新</h3><p>使用 <code>setInterval</code> 設定每 1000 毫秒 (1 秒) 更新一次時間以及顏色。時間的部分，我讓程式碼每秒重新抓一次時間，也就是每秒執行一次函式 <code>currentTime()</code>。至於顏色，是我認為這個作品中較有難度的部分。</p><p>我希望顏色能夠小幅度變化，但又能感受到不同，而不是每秒就隨機換一個顏色，因此我不打算每秒執行一次 <code>currentColor()</code> 。經過幾次嘗試之後，我讓 RGB 色碼中的 B 值每秒加 10，讓顏色往藍色偏移、越來越亮，也越來越淺。但因為 RGB 色碼的範圍在 0~255 ，因此要設定條件讓數值往上增加的同時不會超過 255，並且思考，當數值到了 255 的時候，下一步我希望程式執行什麼動作。</p><p>如果 B 值到了 255，我讓前面的 G 值加 1，同時 B 的值歸零，重新往上加。同樣地，如果 G 值也到了 255，那就讓前面的 R 值加 1。若是 RGB 三個值都滿 255，則隨機產生顏色。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每秒更新時間跟顏色</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 更新時間</span></span><br><span class="line">    currentTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新顏色的條件與動作</span></span><br><span class="line">    <span class="keyword">if</span> (rgbNum[<span class="number">2</span>] <= <span class="number">245</span>) {</span><br><span class="line">        rgbNum[<span class="number">2</span>] += <span class="number">10</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (rgbNum[<span class="number">1</span>] <= <span class="number">254</span>) {</span><br><span class="line">        rgbNum[<span class="number">1</span>]++;</span><br><span class="line">        rgbNum[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (rgbNum[<span class="number">0</span>] <= <span class="number">254</span>) {</span><br><span class="line">        rgbNum[<span class="number">0</span>]++;</span><br><span class="line">        rgbNum[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        currentColor();</span><br><span class="line">    }</span><br><span class="line">    rgb = <span class="string">"rgb("</span> + rgbNum[<span class="number">0</span>] + <span class="string">","</span> + rgbNum[<span class="number">1</span>] + <span class="string">","</span> + rgbNum[<span class="number">2</span>] + <span class="string">")"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.style.backgroundColor = rgb;</span><br><span class="line">    colorStr.innerHTML = rgb;</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>實際操作幾次後觀察發現，當 RGB 值中，三個都較小的時候，背景顏色太暗，字會看不清楚。因此原本打算在此條件下，讓畫面上的文字改為淺色，但該以多少 RGB 值為分界實在很難斷定，故多次嘗試之後決定將 <code>.container</code> 作為有透明度的淺色背板，讓背景色較暗時能凸顯出字來。</p><p>另外，由於一開始，我將色碼顯示位置的變數宣告為 <code>color</code>，顯示 RGB 色碼到畫面上時沒問題，可是要修改字的顏色時，因為變數跟字的顏色屬性 <code>color</code> 一樣，所以出現問題。把色碼顯示位置的變數名稱改為 <code>colorStr</code> 之後，就能正常執行了。</p><h2 id="問題與解決"><a href="#問題與解決" class="headerlink" title="問題與解決"></a>問題與解決</h2><p>製作這個作品時，我遇到的問題及解決方式整理如下：</p><h3 id="問題-1：小於-10-的時候，只顯示一位數。"><a href="#問題-1：小於-10-的時候，只顯示一位數。" class="headerlink" title="問題 1：小於 10 的時候，只顯示一位數。"></a>問題 1：小於 10 的時候，只顯示一位數。</h3><p>用 <code>if</code> 判斷，當數字小於 10 的時候，強制在前面補上 0，其餘不變。確保輸出的時間數值都會是兩位數字。</p><p>參考： <a href="https://innstory.com/story-JavaScript%E7%9A%84%E7%8D%B2%E5%8F%96%E6%97%A5%E6%9C%9F%E4%BB%A3%E7%A2%BC%E4%B8%8D%E8%B6%B3%E5%85%A9%E4%BD%8D%E6%95%B8%E8%A3%9C0-282" target="_blank" rel="noopener">JavaScript 的獲取日期代碼不足兩位數補 0</a></p><h3 id="問題-2-RGB-數值的範圍是-0-255，因此當-setInterval-對-rgb-數值進行改變時，要進行範圍的控制與處理。"><a href="#問題-2-RGB-數值的範圍是-0-255，因此當-setInterval-對-rgb-數值進行改變時，要進行範圍的控制與處理。" class="headerlink" title="問題 2: RGB 數值的範圍是 0~255，因此當 setInterval() 對 rgb 數值進行改變時，要進行範圍的控制與處理。"></a>問題 2: RGB 數值的範圍是 0~255，因此當 <code>setInterval()</code> 對 rgb 數值進行改變時，要進行範圍的控制與處理。</h3><p>用 <code>if</code> 控制讓這些數值不超過 255，並思考數值達到 255 時，希望程式接下來進行什麼動作。</p><p>經過幾次嘗試之後，我讓 RGB 色碼中的 B 值每秒加 10，讓顏色往藍色偏移、越來越亮，也越來越淺。如果 B 值到了 255，則前面的 G 值加 1，同時 B 的值歸零，重新往上加。同樣地，如果 G 值也到了 255，那就讓前面的 R 值加 1。若是 RGB 三個值都滿 255，則隨機產生顏色。</p><h3 id="問題-3-背景顏色深的時候，字的顏色想改淺一點，但範圍怎麼抓？"><a href="#問題-3-背景顏色深的時候，字的顏色想改淺一點，但範圍怎麼抓？" class="headerlink" title="問題 3: 背景顏色深的時候，字的顏色想改淺一點，但範圍怎麼抓？"></a>問題 3: 背景顏色深的時候，字的顏色想改淺一點，但範圍怎麼抓？</h3><p>根據觀察結果，當 RGB 值中，三個都較小的時候，背景顏色太暗，字相對會看不清楚。所以將 <code>.container</code> 作為有透明度的淺色背板，讓背景色較暗時能凸顯出字來。</p><h3 id="問題-4-無法改變字的顏色。"><a href="#問題-4-無法改變字的顏色。" class="headerlink" title="問題 4: 無法改變字的顏色。"></a>問題 4: 無法改變字的顏色。</h3><p>原先我打算在背景色為深色時，將字的顏色改為淺色。操作過程中發現當背景色變深時，字的顏色無法變淺。</p><p>檢查發現，是因為我一開始將色碼顯示位置的變數宣告為 <code>color</code>，顯示 RGB 色碼到畫面上時沒問題，可是要修改字的顏色時，因為變數跟字的顏色屬性 <code>color</code> 一樣，所以出現問題。把色碼顯示位置的變數名稱改為 <code>colorStr</code> 之後，就能正常執行了。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>完成這個作品之後，我去看了<a href="https://github.com/jendewalt/jennifer_dewalt/blob/master/public/js/color_clock.js" target="_blank" rel="noopener">原作的程式碼</a>，除了我在上面的想法中提到的不同之處，幾點主要差異整理如下：</p><ol><li>原作是用 jQuery 進行撰寫，我是使用 JavaScript</li><li>時間的取得方式一樣，但我是以 24 小時制顯示，原作是以 12 小時制顯示。</li><li>原作的顏色透過時間轉換的方式為：<code>red = Math.round(255 * (hour / 23)).toString(16);</code></li></ol><p>當初會做這個主要是因為覺得好看，加上想練習時間函數，心裡也明白這不會有什麼很厲害的用途。不過後來，有時候參加一些幾點就能幹嘛的活動時，會想到開這個來看時間。看著顏色變來變去的，就覺得等待的時間好像也沒那麼無聊了。</p><p>另外就是，有時候練習寫 code 時，只是單純想選一個自己看得順眼的顏色，我也會開這個作品，讓它隨機換顏色，換到喜歡的顏色就把 RGB 值記下來用。這麼想想，這個小作品對我來說還是很有幫助的呢。</p><p>只是背景顏色深或淺的時候，跟字的顏色如何配合，目前的處理方式我還是不太滿意，但有透明度的淺色背板也是我到目前能想到比較好的方法了，如果之後還有更好的方法再來改一改吧。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
